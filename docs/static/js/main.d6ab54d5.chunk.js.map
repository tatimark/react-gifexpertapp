{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","key","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEdC,mBAAS,IAFK,mBAE3CC,EAF2C,KAE/BC,EAF+B,KAsB9C,OAGI,0BAAMC,SAjBO,SAACC,GAElBA,EAAEC,iBAIGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,OASV,2BACCO,KAAK,OACLC,MAAQT,EACRU,SA1Ba,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,YCPdG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OACA,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAMJ,IACzB,2BAAKA,K,uBCPIK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,0DAE6CO,UAAWF,GAFxD,sDAGAG,MAAMR,GAHN,cAGbS,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAYZY,GAZY,4CAAH,sDCMPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,IAAD,EAEZrB,mBAAS,CAChC2B,KAAM,GACNO,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAgCvC,OAzBIC,qBAAW,WACVjB,EAASC,GAAWiB,MAAM,SAAAR,GAGnBM,EAAS,CACLT,KAAMG,EACNI,SAAS,SAMrB,CAAEb,IAaCc,ED5ByBI,CAAclB,GAAlCU,EAFyB,EAE9BJ,KAAcO,EAFgB,EAEhBA,QAyBrB,OACI,oCACQ,wBAAIjB,UAAU,qCAAsCI,GACjDa,GAAW,uBAAGjB,UAAU,yCAAb,eAClB,yBAAKA,UAAU,aAEX,4BAGQc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EACGA,UEpCnBU,EAAe,WAAM,MAEKxC,mBAAS,CAAC,cAFf,mBAExByC,EAFwB,KAEZ1C,EAFY,KAQ9B,OACI,kBAAC,WAAD,KACA,6CAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEO0C,EAAWZ,KAAK,SAACR,GAAD,OAEf,kBAAC,EAAD,CACAqB,IAAMrB,EACNA,SAAYA,U,MCvB5BsB,IAASC,OAAQ,kBACb,EADa,MAEbC,SAASC,eAAe,U","file":"static/js/main.d6ab54d5.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\nconst [inputValue, setInputValue] = useState('')\nconst handleInputChange = ( e ) =>{\n    // console.log(e.target.value)\n    setInputValue(e.target.value);\n}\n\nconst handleSubmit = (e) =>{\n    //evitar el refresh del formulario\n    e.preventDefault();\n    //llamar setCategories\n    //  console.log(setCategories);\n\n    if ( inputValue.trim().length > 2 ){\n   \n        setCategories(cats =>[inputValue, ...cats ]);\n        setInputValue('');\n    }\n    \n    // setCategories(cats =>[...cats, 'Hunter']);\n}\n    return (\n\n    \n        <form onSubmit={ handleSubmit }>\n            <input\n             type=\"text\"\n             value={ inputValue }\n             onChange={ handleInputChange }\n            />\n        </form>\n   \n    )\n}\n\n// AddCategory.propTypes = {\n//     setCategories: PropTypes.func.isRequerid\n// }","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    // console.log({ id, title, url})\n    return ( \n    <div className=\"card animate__animated animate__fadeIn\"> \n        <img src={url} alt={ title } />\n    <p>{ title }</p>\n    </div>\n    )\n}","export const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI( category )}&api_key=40XbpvsJadI7NLNC5vH5Zu1DpOWOg96i`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n\n\n}","import React from 'react';\n import { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n\nexport const GifGrid = ({ category }) => {\n    // const [images, setImages ] = useState([]);\n    const {data:images , loading} = useFetchGifs( category );\n\n\n    // // para que solo se produzca una vez y no que se ejecute todo cada vez que le damos al botón\n    // useEffect( () => {\n    //     getGifs( category ).then( setImages );\n    // }, [ category ]) // se pone por si la categoria cambia\n\n    // const  getGifs = async() =>{\n\n    //     const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI( category )}&api_key=40XbpvsJadI7NLNC5vH5Zu1DpOWOg96i`\n    //     const resp = await fetch ( url );\n    //     const {data} = await resp.json();\n    //     const gifs = data.map ( img =>{\n    //         return{\n    //             id: img.id,\n    //             title: img.title,\n    //             url: img.images?.downsized_medium.url\n    //         }\n    //     } )\n    //     console.log(gifs);\n    //     setImages( gifs );\n       \n    // }\n   \n    return ( \n        <>\n                <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n                 { loading && <p className=\"card animate__animated animate__flash\">Cargando...</p>} \n            <div className=\"card-grid\">\n            \n                <ol>\n                    {\n\n                        images.map( img => (\n                            <GifGridItem\n                            {...img }/>\n                            ))\n                            //  images.map( img => (\n                            //     <li key={ img.id }>{ img.title }</li>\n                            // ))\n\n                            // images.map( ({id, title}) => (\n                            //     <li key={ img.id }>{ img.title }</li>\n                            // ))\n                    }\n            \n                \n                </ol>\n            </div>\n    </>\n    )\n}","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\n//los Custom Hooks funcionan como funcional components efectos , contextos, usar reuser\nexport const useFetchGifs = ( category ) =>{\n\n    const [state, setState ] = useState({\n        data: [],\n        loading: true\n    })\n\n        useEffect( () => {\n         getGifs( category ).then( img =>{\n\n            // setTimeout(() =>{\n                setState({\n                    data: img,\n                    loading: false\n                });\n\n            // }, 2000);\n          \n         } );\n     }, [ category ])\n\n\n\n    //  setTimeout( () => {\n    //     setState({\n    //         data:[1,2,3],\n    //         loading: false\n    //     })\n    //  }, 3000 );\n          \n    \n    \n    return state; //  la data, el loading \n\n}","import React, { useState } from 'react'; \nimport { Fragment } from 'react'; \nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n\n\nexport const GifExpertApp = () => { \n    // const categories = ['One punch', 'Samurai', 'Dragon Ball']; así no se hace a menos que no vaya a cambiar el array\n   const [categories, setCategories] = useState(['One punch']);\n\n//    const handleAdd = () =>{\n//         setCategories(['HunterXHunter', ...categories ]);\n//         //setCategories(cats =>[...cats, 'Hunter']);\n//    }\n    return (\n        <Fragment>\n        <h2> GifExpertApp\n        </h2>\n        <AddCategory setCategories={ setCategories }/>\n        <hr />\n        {/* <button  onClick={ handleAdd }>Agregar</button> */}\n        <ol>\n           {\n               categories.map( (category ) => \n            \n                <GifGrid \n                key={ category }\n                category= { category } />\n               )\n           }\n        </ol>\n        </Fragment>\n      \n     \n        ); \n    }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render( <\n    GifExpertApp / > ,\n    document.getElementById('root')\n);\n\n//GiExpertApp componente\n//<h2>GifExpertApp</h2>\n//<hr />"],"sourceRoot":""}